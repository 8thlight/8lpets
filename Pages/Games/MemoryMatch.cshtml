@page
@model MemoryMatchModel
@{
    ViewData["Title"] = "Memory Match";
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Memory Match</h1>
        <div>
            <span class="8lpoints">8lPoints: @Model.User8lPoints</span>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">How to Play</h5>
        </div>
        <div class="card-body">
            <p>Find all matching pairs of cards to win! Click on cards to flip them over and try to remember their positions.</p>
            <ul>
                <li>Each match: 10 8lPoints</li>
                <li>Complete the game: Bonus 20 8lPoints</li>
                <li>Time bonus: Up to 30 additional 8lPoints based on how quickly you finish</li>
            </ul>
        </div>
    </div>

    @if (Model.GameCompleted)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <h5>Congratulations! You completed the game!</h5>
            <p>You found all @(Model.BoardSize / 2) pairs in @Model.Moves moves and earned <span class="8lpoints">@Model._8lPointsWon 8lPoints</span>!</p>
            <p>Time taken: @Model.FormattedTime</p>
            <form method="post" asp-page-handler="NewGame">
                <button type="submit" class="btn btn-primary">Play Again</button>
            </form>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <div class="col-md-9">
            <div class="card">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Memory Match Game</h5>
                    <div>
                        <span class="badge bg-light text-dark me-2">Moves: @Model.Moves</span>
                        <span class="badge bg-light text-dark me-2">Pairs Found: @Model.PairsFound / @(Model.BoardSize / 2)</span>
                        <span class="badge bg-light text-dark">Time: <span id="timer">@Model.FormattedTime</span></span>
                    </div>
                </div>
                <div class="card-body">
                    <div class="memory-game-board">
                        <div class="row g-2">
                            @for (int i = 0; i < Model.BoardSize; i++)
                            {
                                <div class="col-3 col-md-2">
                                    <form method="post" asp-page-handler="FlipCard">
                                        <input type="hidden" name="cardIndex" value="@i" />
                                        <button type="submit" class="memory-card @(Model.Cards[i].IsFlipped || Model.Cards[i].IsMatched ? "flipped" : "")"
                                                @(Model.Cards[i].IsMatched || Model.GameCompleted ? "disabled" : "")>
                                            @if (Model.Cards[i].IsFlipped || Model.Cards[i].IsMatched)
                                            {
                                                <div class="memory-card-content">
                                                    <i class="fas @Model.Cards[i].Icon fa-3x"></i>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="memory-card-back">
                                                    <i class="fas fa-question fa-2x"></i>
                                                </div>
                                            }
                                        </button>
                                    </form>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-3">
                <form method="post" asp-page-handler="NewGame" class="d-inline">
                    <button type="submit" class="btn btn-primary">New Game</button>
                </form>
                <a asp-page="/Games" class="btn btn-secondary ms-2">Back to Games</a>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Game Statistics</h5>
                </div>
                <div class="card-body">
                    <p>Games Played: @Model.GamesPlayed</p>
                    <p>Best Score: @Model.BestScore moves</p>
                    <p>Best Time: @Model.BestTime</p>
                    <p>Total 8lPoints Won: @Model.Total8lPointsWon</p>
                </div>
            </div>

            <div class="card mt-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Recent Games</h5>
                </div>
                <div class="card-body p-0">
                    <ul class="list-group list-group-flush">
                        @foreach (var game in Model.RecentGames)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>
                                    @game.Moves moves in @game.FormattedTime
                                </span>
                                <span class="badge bg-primary rounded-pill">
                                    @game.PointsWon 8lP
                                </span>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .memory-game-board {
            margin: 0 auto;
        }

        .memory-card {
            width: 100%;
            aspect-ratio: 1;
            border-radius: 8px;
            background-color: #4b6cb7;
            border: none;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, background-color 0.3s ease;
            position: relative;
            overflow: hidden;
            cursor: pointer;
        }

        .memory-card:hover:not(:disabled) {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }

        .memory-card.flipped {
            background-color: #ffffff;
            transform: rotateY(180deg);
        }

        .memory-card-content, .memory-card-back {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            height: 100%;
            color: #ffffff;
        }

        .memory-card.flipped .memory-card-content {
            color: #4b6cb7;
        }

        .memory-card:disabled {
            cursor: default;
        }
    </style>
}

@section Scripts {
    <script>
        // Timer functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Only start the timer if the game is not completed
            @if (!Model.GameCompleted)
            {
                <text>
                // Get the start time from the server
                const startTime = new Date('@Model.GameStartTime.ToString("o")');

                // Update the timer every second
                const timerElement = document.getElementById('timer');

                function updateTimer() {
                    const currentTime = new Date();
                    const elapsedTime = Math.floor((currentTime - startTime) / 1000);

                    const minutes = Math.floor(elapsedTime / 60);
                    const seconds = elapsedTime % 60;

                    timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                }

                // Update immediately and then every second
                updateTimer();
                setInterval(updateTimer, 1000);
                </text>
            }
        });
    </script>
}
